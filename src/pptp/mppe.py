import hashlib

from pptp import mschapv2
from utils import printResult

SHSpad1 = bytes([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

SHSpad2 = bytes([0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,
                 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,
                 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,
                 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2])

Magic1 = bytes([0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74,
                0x68, 0x65, 0x20, 0x4d, 0x50, 0x50, 0x45, 0x20, 0x4d,
                0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x4b, 0x65, 0x79])

Magic2 = bytes([0x4f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,
                0x65, 0x6e, 0x74, 0x20, 0x73, 0x69, 0x64, 0x65, 0x2c, 0x20,
                0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
                0x65, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x6b, 0x65, 0x79,
                0x3b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
                0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x69, 0x64, 0x65,
                0x2c, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
                0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20,
                0x6b, 0x65, 0x79, 0x2e])

Magic3 = bytes([0x4f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,
                0x65, 0x6e, 0x74, 0x20, 0x73, 0x69, 0x64, 0x65, 0x2c, 0x20,
                0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
                0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20,
                0x6b, 0x65, 0x79, 0x3b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
                0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73,
                0x69, 0x64, 0x65, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,
                0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20,
                0x6b, 0x65, 0x79, 0x2e])


@printResult
def GetMasterKey(passwordHashHash, NTResponse):
    global Magic1
    hasher = hashlib.new('sha1')
    hasher.update(passwordHashHash)
    hasher.update(NTResponse)
    hasher.update(Magic1)

    return hasher.digest()[0:16]


@printResult
def Md4Hash(data):
    hasher = hashlib.new('md4')
    hasher.update(data)
    return hasher.digest()


@printResult
def GetAsymetricStartKey(masterKey, sessionKeyLength, isSend, isServer):
    if not isinstance(isSend, bool) or not isinstance(isServer, bool):
        raise TypeError

    if isSend:
        if isServer:
            s = Magic3
        else:
            s = Magic2
    else:
        if isServer:
            s = Magic2
        else:
            s = Magic3

    hasher = hashlib.new('sha1')
    hasher.update(masterKey)
    hasher.update(SHSpad1)
    hasher.update(s)
    hasher.update(SHSpad2)

    return hasher.digest()[0:sessionKeyLength]


@printResult
def GetNewKeyFromSha(startKey, sessionKey, sessionKeyLength) -> bytes:
    hasher = hashlib.new('sha1')
    hasher.update(startKey)
    hasher.update(SHSpad1)
    hasher.update(sessionKey)
    hasher.update(SHSpad2)

    return hasher.digest()[0:sessionKeyLength]


if __name__ == '__main__':
    authenticator_challenge = b'\x5B\x5D\x7C\x7D\x7B\x3F\x2F\x3E\x3C\x2C\x60\x21\x32\x26\x26\x28'
    peer_challenge = b'\x21\x40\x23\x24\x25\x5E\x26\x2A\x28\x29\x5F\x2B\x3A\x33\x7C\x7E'
    username = "User".encode()
    password = "clientPass".encode('utf-16-le')

    passwordHash = mschapv2.NtPasswordHash(password)
    passwordHashHash = Md4Hash(passwordHash)

    ntResponse = mschapv2.GenerateNTResponse(authenticator_challenge, peer_challenge, username, password)
    masterKey = GetMasterKey(passwordHashHash, ntResponse)
    sendStartKey = GetAsymetricStartKey(masterKey, 16, True, True)
    sendSessionKey = GetNewKeyFromSha(sendStartKey, sendStartKey, 16)
